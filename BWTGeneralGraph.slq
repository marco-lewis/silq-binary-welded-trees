import utils;

// Depth - number of layers of each tree (at least 3)
// Weld - list of nodes alternating between trees
// Colors: 0 - Red, 1 - Green, 2 - Blue, 3 - Yellow
def BWTOracle[n:!N, depth:!N](weld:!uint[n]^(2^depth), color:!N, a:uint[n])lifted:uint[n]{
    out := vector(n, 1:B) as uint[n];

    // Left tree oracle
    root := 1:!uint[n];
    if (a == root && color == 0){
        out = root + 1:uint[n];
    }
    if (a == root && color == 1){
        out = (root + 2:uint[n]);
    }

    col_by := true:!B;
    for layer in [1..depth - 1){
        offset_num := floor(2^(layer)) as !uint[n];

        for offset in [0..offset_num as !N){
            // Check top color
            node := root + offset_num - 1 + offset as uint[n];
            current_color := [0:!B, col_by] coerce !uint[2];
            if (a == node && color == current_color){
                out = (node + offset_num + offset);
            }

            // Check bottom color
            current_color = [1:!B, col_by] coerce !uint[2];
            if (a == node && color == current_color){
                out = (node + offset_num + offset + 1);
            }

            // Check back color
            back_col := (mod(offset, 2) coerce !B);
            current_color = [back_col, X(col_by)] coerce !uint[2];
            if (a == node && color == current_color){
                out = (node - offset - (offset_num div 2) + (offset div 2));
            }
        }
        col_by = X(col_by);
    }

    // Weld oracle
    left_side := weld[0] <= 2^depth :!B;

    col_by = mod(depth, 2) == 0;
    for weld_idx in [0..2^depth){
        if weld_idx == (2^depth - 1) { next_num := 0; }
        else { next_num := weld_idx + 1; }
        if weld_idx == 0 { prev_num := 2^depth - 1; }
        else { prev_num := weld_idx - 1; }
        
        // Find first weld node
        weld_node := weld[weld_idx]:uint[n];
        current_color := [left_side, col_by] coerce !uint[2];
        if (a == weld_node && color == current_color){
            out = (weld[next_num] as uint[n]);
        }

        // Find second weld node
        current_color = [X(left_side), col_by] coerce !uint[2];
        if (a == weld_node && color == current_color){
            out = (weld[prev_num] as uint[n]);
        }

        // Find node on tree attached to leaf
        back_col := X(weld[weld_idx][0]) âŠ• left_side;
        current_color = [back_col, X(col_by)] coerce !uint[2];
        if (a == weld_node && color == current_color){
            if left_side{
                out = (weld_node div 2 as uint[n]);
            }
            else {
                offset := weld_node - 2^(depth) - ((2^(depth) div 2) - 1);
                out = weld_node - offset + (offset div 2) - (2^(depth - 1) div 2);
            }
        }
        left_side = X(left_side);
    }

    // Right tree oracle
    root = 2^depth as !uint[n];
    if (a == root && color == 0){
        out = root + 1:uint[n];
    }
    if (a == root && color == 1){
        out = (root + 2:uint[n]);
    }

    col_by = true:!B;
    for layer in [1..depth - 1){
        offset_num := floor(2^(layer)) as !uint[n];

        for offset in [0..offset_num as !N){
            // Check top color
            node := root + offset_num - 1 + offset as uint[n];
            current_color := [0:!B, col_by] coerce !uint[2];
            if (a == node && color == current_color){
                out = (node + offset_num + offset);
            }

            // Check bottom color
            current_color = [1:!B, col_by] coerce !uint[2];
            if (a == node && color == current_color){
                out = (node + offset_num + offset + 1);
            }

            // Check back color
            back_col := (mod(offset, 2) coerce !B);
            current_color = [back_col, X(col_by)] coerce !uint[2];
            if (a == node && color == current_color){
                out = (node - ((offset + 1) div 2) - (offset_num div 2));
            }
        }
        col_by = X(col_by);
    }

    return out;
}