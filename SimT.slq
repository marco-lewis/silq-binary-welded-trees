import utils;

def entangleSWAP[n:!N](anc:B,node_reg:uint[n],na:uint[n])mfree{
    for i in [0..n){
    [node_reg[i], na[i]] := W(node_reg[i], na[i]);
    anc := tof_on_off(node_reg[i], na[i], anc);
  }
  return (anc,node_reg,na);
}

// Simulation of T matrix
// Requires tidying up and return of multiple qubits
def sim_T[n:!N](
    const t:!R, 
    node_reg:uint[n], 
    neighbour_anc:uint[n], 
    err_anc:B)
  {
  // Entangle SWAP state
  (anc,node_reg,neighbour_anc) := entangleSWAP(0:B,node_reg,neighbour_anc);
  
  // Perform simulation
  anc := cexp_z(t, err_anc, anc);

  // Undo entangled SWAP
   (0:B,node_reg,neighbour_anc) := reverse(entangleSWAP[n])(anc,node_reg,neighbour_anc);
   return (node_reg, neighbour_anc, err_anc);
}