import BWTAlgorithm;
import BWTGeneralGraph;

depth := 4;
// bits := 2*(depth+1);
bits := 6;

def main(){
  t := 1/sqrt(2);

  G := Î»(color:!N, const node:uint[bits])qfree.{return BWTOracle[bits, depth]([8,25,10,30,12,24,15,27,11,26,13,23,14,28,9,29] coerce !uint[bits]^(2 ^ depth), color, node);};
  steps := 8;
  
  results := vector(2^bits, 0:!N);
  for i in [0..1){
    res:= BWT[bits](G, steps, t, true);
    
    results[res] = results[res] + 1;
    print(res);
  }
  return results;
}